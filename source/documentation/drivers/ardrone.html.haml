---
page_title_show: true
title: Artoo - ARDrone Driver
author: The Hybrid Group
page_title: ARDrone
page_subtitle: Driver
layout: documentation

ardrone_platform: true
---

%section.intro
  =image_tag "/images/devices/ardrone-flight.jpg", class: "display"
  %p
    Allows user to send flight control commands to an ARDrone. Flight control commands are those used to tell the ARDrone to take off, land, and or any number of other autonomous flight manuvers.
%section.how-to
  %h2 How to establish a connection and setup the driver
  %p
    Communication with the ARDrone's flight control interface takes place using a WiFi connection. The ARDrone is a WiFi access point, so it normally can be the only device you connect to, without some additional effort to reconfigure the drone itself to put it into infrastructure mode.
  :markdown
        :::ruby
        require 'artoo'
        connection :ardrone, :adaptor => :ardrone, :port => '192.168.1.1:5556'
        device :drone, :driver => :ardrone, :connection => :ardrone

%section.public-methods
  %h2 Commands:
  %table.commands 
    %tr 
      %th Command (param)
      %th Description
    %tr 
      %td.command start 
      %td.param  
        %p Starts up the drone.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command stop  
      %td.param  
        %p Stops the drone.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command hover   
      %td.param  
        %p Causes the drone to hover at current altitude.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command land  
      %td.param  
        %p Causes the drone to begin its landing sequence.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command take_off   
      %td.param  
        %p Causes the drone to take off, if already started.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command emergency 
      %td.param  
        %p Causes the drone to make an immediate emergency landing.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command front_camera  
      %td.param  
        %p Causes the drone to turn on the front-facing camera.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command bottom_camera 
      %td.param  
        %p Causes the drone to turn on the bottom-facing camera.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command up  
      %td.param  
        %p Causes the drone to increase altitude.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command down  
      %td.param  
        %p Causes the drone to decrease altitude.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command left  
      %td.param  
        %p Causes the drone to bank to the left.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command right  
      %td.param  
        %p Causes the drone to bank to the right.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command forward  
      %td.param  
        %p Causes the drone to bank forward.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command backward  
      %td.param  
        %p Causes the drone to bank backward.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command turn_left  
      %td.param  
        %p Causes the drone to rotate to the left.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command turn_right  
      %td.param  
        %p Causes the drone to rotate to the right.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command reset_watchdog  
      %td.param  
        %p Reset the watchdog in the drone.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command led(color_animation, strength, duration)  
      %td.param  
        %p 
          Turn on the drone's built in LEDs with the color_animation passed, strength and duration; color_animation might be one of the following:
          %span  :blink_green_red, :blink_green, :blink_red, :blink_orange, :snake_green_red, :fire, :standard, :red, :green, :red_snake, :blank, :right_missile, :left_missile, :double_missile, :front_left_green_others_red, :front_right_green_others_red, :rear_right_green_others_red, :rear_left_green_others_red, :left_green_right_red, :left_red_right_green, :blink_standard
        %h5 Params
        %span (color_animation, strength, duration) → drone
        %h5 Returns 
        %span drone
    %tr 
      %td.command animate(animation, duration) 
      %td.param  
        %p 
          Animate the ardrone to do flips and turns depending on selection, available animation options are:
          %span :phi_m30_deg, :phi_30_deg, :theta_m30_deg, :theta_30_deg, :theta_20_deg_yaw_200_deg, :theta_20_deg_yaw_m_200_deg, :turnaround, :turnaround_go_down, :yaw_shake, :yaw_dance, :phi_dance, :theta_dance, :vz_dance, :wave, :phi_theta_mixed, :double_phi_theta_mixed, :flip_ahead, :flip_behind, :flip_left, :flip_right
        %h5 Params
        %span (animation, duration) → drone
        %h5 Returns 
        %span drone

%section.how-to
  %h2 How to use
  %h3 Example of controlling an ARDrone.
  :markdown
        :::ruby
        require 'artoo'

        connection :ardrone, :adaptor => :ardrone, :port => '192.168.1.1:5556'
        device :drone, :driver => :ardrone, :connection => :ardrone

        work do
          drone.start
          drone.take_off

          after(15.seconds) { drone.hover.land }
          after(20.seconds) { drone.stop }
        end

  %h3 Example of ARDrone doing a flip.
  :markdown
        :::ruby
        require 'artoo'

        connection :ardrone, :adaptor => :ardrone
        device :drone, :driver => :ardrone, :connection => :ardrone

        connection :navigation, :adaptor => :ardrone_navigation, :port => '192.168.1.1:5554'
        device :nav, :driver => :ardrone_navigation, :connection => :navigation

        work do
          on drone, :ready => :fly
          drone.start(nav)
        end

        def fly(*data)
          drone.take_off
          after(10.seconds) { drone.animate(:flip_ahead, 1000) }
          after(15.seconds) { drone.hover.land }
          after(20.seconds) { drone.stop }
        end

%section.compatability.hardware
  %h2 Works with:
  .devices
    =# TODO: Update platform list at the top of the page.
    = partial "documentation/partials/devices_platforms"
