---
page_title_show: true
title: Artoo - Crazyflie Flight Driver
author: The Hybrid Group
page_title: Crazyflie
page_subtitle: Flight
layout: documentation

crazyflie_platform: true
---
%section.intro
  =image_tag "/images/devices/crazyflie-driver.jpg", class: "display"
  %p Allows user to send flight control commands to a Crazyflie micro-quadcopter. Flight control commands are those used to tell the Crazyflie to take off, land, and or any number of other autonomous flight manuvers.

%section.how-to
  %h2 How to establish a connection and setup the driver
  %p Communication with the Crazyflie's flight control interface takes place using a 2.4GHz radio connection. The Crazyflie is controlled from your computer using a Crazyradio, which is a custom USB 2.4GHz radio device. 
  :markdown
        :::ruby
        require 'artoo'
        connection :crazyflie, :adaptor => :crazyflie
        device :drone, :driver => :crazyflie, :connection => :crazyflie, :interval => 0.1

%section.public-methods
  %h2 Commands:
  %table.commands 
    %tr 
      %th Command (param)
      %th Description
    %tr 
      %td.command start 
      %td.param  
        %p Starts the crazyfly's motors and controls.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command stop 
      %td.param  
        %p Stops the crazyfly's motors.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command hover 
      %td.param  
        %p Makes the crazyflie hover in a position.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command land 
      %td.param  
        %p Initiates a landing sequence.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command take_off 
      %td.param  
        %p Initiates take off sequence.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command up 
      %td.param  
        %p Orders crazy flie to go up.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command down 
      %td.param  
        %p Orders crazy flie to go down.
        %h5 Params
        %span no params
        %h5 Returns 
        %span drone
    %tr 
      %td.command left(deg) 
      %td.param  
        %p  Orders crazyflie to go left the amount specified by deg (roll left).
        %h5 Params
        %span deg → drone
        %h5 Returns 
        %span drone
    %tr 
      %td.command right(deg)
      %td.param  
        %p  Orders crazyflie to go right the amount specified by deg (roll right).
        %h5 Params
        %span deg → drone
        %h5 Returns 
        %span drone
    %tr 
      %td.command forward(deg)
      %td.param  
        %p Orders crazyflie to go forward the amount specified by deg (pitch forward).
        %h5 Params
        %span deg → drone
        %h5 Returns 
        %span drone
    %tr 
      %td.command backward(deg)
      %td.param  
        %p Orders crazyflie to go backward the amount specified by deg (pitch backward).
        %h5 Params
        %span deg → drone
        %h5 Returns 
        %span drone
    %tr 
      %td.command turn_left(deg)
      %td.param  
        %p Orders crazyflie to turn left the amount specified by deg (yaw left).
        %h5 Params
        %span deg → drone
        %h5 Returns 
        %span drone
    %tr 
      %td.command turn_right(deg)
      %td.param  
        %p Orders crazyflie to turn right the amount specified by deg (yaw right).
        %h5 Params
        %span deg → drone
        %h5 Returns 
        %span drone
    %tr 
      %td.command power(deg)
      %td.param  
        %p Sets thrust power to deg.
        %h5 Params
        %span deg → drone
        %h5 Returns 
        %span drone


%section.how-to
  %h2 How to use
  %h3 Example of controlling a Crazyflie.
  :markdown
        :::ruby
        require 'artoo'

        connection :crazyflie, :adaptor => :crazyflie
        device :drone, :driver => :crazyflie, :connection => :crazyflie, :interval => 0.1

        work do
          drone.forward(0)
          drone.set_thrust_on
          after(1.seconds) {drone.stop}
        end

%section.compatability.hardware
  %h2 Works with:
  .devices
    =# TODO: Update platform list at the top of the page.
    = partial "documentation/partials/devices_platforms"
