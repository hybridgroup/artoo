---
page_title_show: true
title: Artoo - ARDrone Navigation Driver
author: The Hybrid Group
page_title: ARDrone Navigation
page_subtitle: Driver
layout: documentation
ardrone_platform: true
---

%section.intro
  =image_tag "/images/devices/ardrone-navigation.jpg", class: "display"
  %p
    Allows user to receive in-flight navgation data from an ARDrone. Navigation data includes such information as the ARDrone's current pitch and yaw, along with many other data elements.

%section.how-to
  %h2 How to establish a connection and setup the driver
  %p
    Communication with the ARDrone's navigation data interface takes place using a WiFi connection. The ARDrone is a WiFi access point, so it normally can be the only device you connect to, without some additional effort to reconfigure the drone itself to put it into infrastructure mode.

  :markdown
        :::ruby
        require 'artoo'
        connection :navigation, :adaptor => :ardrone_navigation, :port => '192.168.1.1:5554'
        device :nav, :driver => :ardrone_navigation, :connection => :navigation

%section.public-methods
  %h2 Events:
  %table.commands 
    %tr 
      %th Event
      %th Description
    %tr 
      %td.command 
        %span navdata
      %td 
        %p Gets triggered every time interval amount of time passes, returns and lets you access a NavData object containing the attributes described below:
        %ul
          %li
            %b navdata.sequence_number
            → String (returns the sequence number)
          %li
            %b navdata.vision_flag
            → String (returns the sequence number)
          %li
            %b navdata.flying?
            → Boolean (is the ardrone flying?)
          %li
            %b navdata.communication_lost?
            → Boolean (is communication lost?)
          %li
            %b navdata.com_watchdog_problem?
            → Boolean (is there a watchdog problem?)
          %li
            %b navdata.bootstrap?
            → Boolean (boostrap navigation setup?)
    %tr 
      %td.command 
        %span demo
      %td 
        %p Gets triggered every time interval amount of time passes, returns and lets you access a NavOptionDemo object containing navigation data as described below:
        %ul
          %li
            %b nav_option_demo.control_state_name
            → String (returns control state name)
          %li
            %b nav_option_demo.control_state
            → Integer (returns control state)
          %li
            %b nav_option_demo.battery_level
            → Integer
          %li
            %b nav_option_demo.pitch
            → float (returns the current pitch)
          %li
            %b nav_option_demo.roll
            → float (returns the current roll)
          %li
            %b nav_option_demo.yaw
            → float (returns the current yaw)
          %li
            %b nav_option_demo.altitude
            → float (returns the current altitude)
          %li
            %b nav_option_demo.vx
            → float (returns the current velocity on X axis)
          %li
            %b nav_option_demo.vy
            → float (returns the current velocity on Y axis)
          %li
            %b nav_option_demo.vz
            → float (returns the current velocity on Z axis)
    %tr 
      %td.command 
        %span vision_detect
      %td 
        %p Gets triggered every time interval amount of time passes, returns and lets you access a NavOptionVisionDetect object containing the following data:
        %ul
          %li
            %b nav_option_vision_detect.detected_count
            → Integer (Number of devices detected)
          %li
            %b nav_option_vision_detect.type
            → String
          %li
            %b nav_option_vision_detect.name
            → String
          %li
            %b nav_option_vision_detect.x
            → integer
          %li
            %b nav_option_vision_detect.y
            → integer
          %li
            %b nav_option_vision_detect.width
            → integer
          %li
            %b nav_option_vision_detect.height
            → integer
          %li
            %b nav_option_vision_detect.distance
            → integer
          %li
            %b nav_option_vision_detect.orientation_angle
            → float
          %li
            %b nav_option_vision_detect.camera_source
            → integer
        

  %h3 How to use events and call them on your drivers
  %p Pretty simple, when the connection and the driver have been setup (as explained above) you can call events on them as follows:
  :markdown
        :::ruby
        on nav, :navdata => proc { |caller, navdata| puts "Sequence number: \#{ navdata.sequence_number }" }
        on nav, :demo => proc { |caller, navdata, nav_option_demo| 
          puts "Ardrone pitch: \#{ nav_option_demo.pitch }"
          puts "Ardrone roll:  \#{ nav_option_demo.roll }"
          puts "Ardrone yaw:   \#{ nav_option_demo.yaw }"
        }
        on nav, :vision_detect => proc { |caller, navdata, nav_option_vision_detect|
          puts "Vision detect count: \#{ nav_option_vision_detect.detected_count }"
          puts "Vision detect type: \#{ nav_option_vision_detect.type }"
          puts "Vision detect name: \#{ nav_option_vision_detect.name }"
        }

%section.how-to
  %h2 How to use
  %h3 Example of receiving navigation data from an ARDrone.
  :markdown
        :::ruby
        require 'artoo'

        connection :navigation, :adaptor => :ardrone_navigation, :port => '192.168.1.1:5554'
        device :nav, :driver => :ardrone_navigation, :connection => :navigation

        work do
          on nav, :navdata => :nav_update
        end

        def nav_update(*data)
          p data[1].inspect
        end

%section.compatability.hardware
  %h2 Works with:
  .devices
    =# TODO: Update platform list at the top of the page.
    = partial "documentation/partials/devices_platforms"
